version: 2.1
# Need to set the name of the function
# Need to set the ssh fingerprint
parameters:
  function-name:
    type: string
    default: "Python_MonoRepo_Kubeless"
  git-repo-ssh-fingerprint:
    type: string
    default: "74:38:af:58:98:cb:18:85:16:d8:db:c4:e2:3e:be:23"

orbs:
  aws-eks: circleci/aws-eks@0.2.6
  aws-s3: circleci/aws-s3@1.0.15
  rememborb: circleci/rememborb@0.0.1
executors:
  machine:
    machine:
      image: ubuntu-1604:201903-01
  python:
    parameters:
      version:
        type: string
        default: "3.7"
    docker:
      - image: circleci/python:<< parameters.version >>
  node:
    parameters:
      version:
        type: string
        default: "12"
    docker:
      - image: circleci/node:<< parameters.version >>
  base:
    docker:
      - image: cimg/base:2020.01
commands:
  install-bazel-linux:
    steps:
      - run: |
          export BAZEL_VERSION=3.3.0
          curl -OL https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh
          chmod +x bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh
          sudo ./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh
          rm ./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh
  upload-to-s3:
    parameters:
      file:
        type: string
      s3-bucket-name:
        type: env_var_name
        default: AWS_S3_FUNCTIONS_BUCKET_NAME
      s3-prefix:
        type: string
    steps:
      - attach-workspace:
          at: .
      - aws-s3/copy:
          from: "<< parameters.file >>"
          to: "s3://${<< parameters.s3-bucket-name >>}/<< parameters.s3-prefix >>/<< parameters.file >>"
  zip-files:
    parameters:
      source-path:  
        type: string
        default: "src"
      function-prefix:
        type: string
        default: "function"
      file-extension:
        type: string
        default: "py"
    steps:
      - attach_workspace:
          at: .
      - run: |
          export VERSION=$(cat version.txt) >> $BASH_ENV
          echo "version: $VERSION"
          export ZIP_FILE="<< parameters.function-prefix >>-${VERSION}.zip"
          exporter="export ZIP_FILE=${ZIP_FILE}"
          echo $exporter >> $BASH_ENV
          remember_file="/tmp/circleci_remember/.circleci_remember/ZIP_FILE"
          mkdir -p $(dirname $remember_file)
          echo $exporter >> $remember_file
          zip -x "*test*.<< parameters.file-extension >>" -r -j $ZIP_FILE << parameters.source-path >>
      - persist_to_workspace:
          root: /tmp/circleci_remember
          paths:
            - .circleci_remember/ZIP_FILE
      - persist_to_workspace:
          root: .
          paths: .
  generate-checksum:
    parameters:
      file:
        type: string
    steps:
      - attach_workspace:
          at: .
      - rememborb/recall:
          env_var: ZIP_FILE
      - run: |
          echo "export CHECKSUM=$(shasum -a 256 ${ZIP_FILE} | cut -d " " -f 1 )" >> $BASH_ENV
          source $BASH_ENV
  build-artifacts:
    parameters:
      source-path:
        type: string
      s3-prefix:
        type: string
    steps:
      - zip-files:
          source-path: << parameters.source-path >>
      - rememborb/recall:
          env_var: ZIP_FILE
      - generate-checksum:
          file: ${ZIP_FILE}
      - upload-to-s3:
          file: ${ZIP_FILE}
          s3-prefix: << parameters.s3-prefix >>
  generate-function-manifest:
    parameters:
      kubeless-version:
        type: string
        default: "v1.0.6"
      function-name:
        type: string
      handler-name:
        type: string
      namespace:
        type: string
      requirements-file-path:
        type: string
      entry-script:
        type: string
      script-file-path:
        type: string
      s3-bucket-name:
        type: env_var_name
        default: AWS_S3_FUNCTIONS_BUCKET_NAME
      s3-prefix:
        type: string
      runtime:
        type: string
        enum: ["python3.6", "python3.7"]
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          aws-region: ${WILL_K8S_AWS_REGION}
          cluster-name: ${WILL_K8S_SHARED_CLUSTER_NAME}
          install-kubectl: true
      - run: |
          wget https://github.com/kubeless/kubeless/releases/download/<< parameters.kubeless-version>>/kubeless_linux-amd64.zip && \
          unzip kubeless_linux-amd64.zip && \
          sudo mv bundles/kubeless_linux-amd64/kubeless /usr/local/bin/
      - run: |
          SCRIPT_URL=https://s3.amazonaws.com/${<< parameters.s3-bucket-name >>}/<< parameters.s3-prefix >>/<<parameters.script-file-path >>?raw=true
          kubeless function deploy << parameters.function-name >> --from-file "${SCRIPT_URL}" --handler << parameters.entry-script >>.<< parameters.handler-name >> --runtime << parameters.runtime >> --dependencies << parameters.requirements-file-path >> --namespace << parameters.namespace >> --headless --dryrun --output yaml > << parameters.function-name >>.yaml
          if [[ -s << parameters.function-name >>.yaml ]]; then
            echo "successfully created << parameters.function-name >>.yaml"
          else
            echo "Unabled to create manifest"
            exit 1
          fi
  inject-checksum-in-manifest:
    parameters:
      checksum:
        type: string
      manifest-file:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run: echo "checksum value << parameters.checksum >>"
      - run: sudo apt install snapd
      - run: sudo snap install --stable yq
      - run: cat << parameters.manifest-file >> | /snap/bin/yq w - spec.checksum "sha256:<< parameters.checksum >>" | tee << parameters.manifest-file >>
      - persist_to_workspace:
          root: .
          paths: .
jobs:
  tag-version:
    executor: node
    parameters:
      releaseStage:
        type: enum
        enum: ["alpha", "beta"]
        default: "beta"
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Avoid hosts unknown for github
          command: mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
      - add_ssh_keys:
          fingerprint:
            - "20:ef:fc:ff:71:f0:30:e7:62:75:de:da:6f:8d:31:1f"
      - run: |
          git config user.email "w.m.n.sim@gmail.com"
          git config user.name "will-to-ride"
          if [ -f "CHANGELOG.md" ]; then
            npm init -y
            npm version $(cat version.txt) --git-tag-version false
            npx standard-version@v7.1.0 -t "<< parameters.releaseStage >>-v" --releaseCommitMessageFormat "chore(release): [ci skip] tagged: {{currentTag}}" --git-tag-fallback false
            rm -f package.json
          else
            npx standard-version -t "<< parameters.releaseStage >>-v" --releaseCommitMessageFormat "chore(release): [ci skip] tagged: {{currentTag}}" --first-release
          fi
          git push --follow-tags origin master
      - persist_to_workspace:
          root: .
          paths: .
  generate-manifest:
    executor: machine
    environment:
      FUNCTION_NAME: "<< parameters.function-prefix >>-<< pipeline.parameters.function-name >>"
    parameters:
      function-prefix:
        type: string
        default: "function"
      gitops-repo-base-dir:
        type: string
        default: "shared"
      handler-name:
        type: string
        default: "execute"
      namespace:
        type: string
      requirements-file-path:
        type: string
        default: "requirements.txt"
      entry-script:
        type: string
        default: "handler"
      source-path:
        type: string
        default: "src"
      file-extension:
        type: string
        default: "py"
      runtime:
        type: enum
        enum: ["python3.7", "python3.8"]
    steps:
      - checkout
      - build-artifacts:
          source-path: << parameters.source-path >>
          s3-prefix: << pipeline.parameters.function-name >>
      - rememborb/recall:
          env_var: ZIP_FILE
      - generate-function-manifest:
          function-name: ${FUNCTION_NAME}
          entry-script: << parameters.entry-script >>
          handler-name: << parameters.handler-name >>
          namespace: << parameters.namespace >>
          runtime: << parameters.runtime >>
          s3-prefix: << pipeline.parameters.function-name >>
          script-file-path: ${ZIP_FILE}
          requirements-file-path: << parameters.requirements-file-path >>
      - inject-checksum-in-manifest:
          checksum: ${CHECKSUM}
          manifest-file: "${FUNCTION_NAME}.yaml"
      - run: |
          mkdir -p $HOME/gitops
          cp ${FUNCTION_NAME}.yaml $HOME/gitops
          cd $HOME/gitops
          git clone https://${WILL_FAAS_GIT_USER}:"${WILL_FAAS_GIT_PASSWORD}"@github.com/will-to-ride/${WILL_GITOPS_REPO_NAME}.git
          cd ${WILL_GITOPS_REPO_NAME}
          GITOPS_PATH=<< parameters.gitops-repo-base-dir >>/<< parameters.namespace >>/<< pipeline.parameters.function-name >>
          mkdir -p ${GITOPS_PATH}
          cp -rf $HOME/gitops/${FUNCTION_NAME}.yaml ${GITOPS_PATH}/${FUNCTION_NAME}.yaml
          if [[ $(git status --porcelain) ]]; then
            git config user.email "w.m.n.sim@gmail.com"
            git config user.name "will-to-ride"
            git add . && git commit -am "${CIRCLE_PROJECT_REPONAME}-${CIRCLE_SHA1}"
            git pull origin master
            git push origin master
          else
            echo "No changes to publish"
          fi
  unit-tests:
    executor:
      name: python
    steps:
      - install-bazel-linux
      - attach_workspace:
          at: .
      - run: bazel test //... --test_output=errors  
  build:
    parameters:
      serviceName:
          type: string
    executor:
      name: python
    steps:
      - checkout
      - persist_to_workspace:
          root: .
          paths: .  
  build-service-1:
    parameters:
      serviceName:
          type: string
    executor:
      name: python
    steps:
      - checkout
      - persist_to_workspace:
          root: .
          paths: ./Services/<< parameters.serviceName >> 
  validate-project-setup:
    executor:
      name: base
    steps:
      - run: |
          if [[ "<< pipeline.parameters.function-name >>" == "CHANGE_ME" ]]; then
            echo "parameters.function-name must be set.  Refer to top of circleci config"
            exit 1
          fi
          if [[ "<< pipeline.parameters.git-repo-ssh-fingerprint >>" == "CHANGE_ME" ]]; then
            echo "parameters.git-repo-ssh-fingerprint must be set.  Refer to top of circleci config"
            exit 1
          fi
workflows:
  version: 2.1
  build:
    jobs:
      - validate-project-setup
      - build:
          serviceName: Service1
          requires:
            - validate-project-setup
      - build-service-1:
          serviceName: Service1
          requires:
            - validate-project-setup
      - unit-tests:
          requires:
            - build
      - tag-version:
          requires:
            - unit-tests
          releaseStage: "beta"
          filters:
            branches:
              only: master
  # publish-k8s-manifest:
  #   jobs:
  #     - generate-manifest:
  #         context: will-functions
  #         namespace: "functions"
  #         gitops-repo-base-dir: "shared-will-io"
  #         runtime: "python3.7"
  #         filters:
  #           branches:
  #             ignore: /.*/
  #           tags:
  #             only: /^beta-v[0-9]+(\.[0-9]+){2}$/
  #     - generate-manifest:
  #         context: will-functions
  #         namespace: "functions"
  #         gitops-repo-base-dir: "production-will-io"
  #         runtime: "python3.7"
  #         filters:
  #           branches:
  #             ignore: /.*/
  #           tags:
  #             only: /^v[0-9]+(\.[0-9]+){2}$/